# Text Linter - Cursor Rules

## 概要
このプロジェクトは、URLリストからWebページのテキストを取得し、既存のproofreader.jsとCursorのLLMを使って誤字・誤記の校正を行うツールです。

## 自動実行ルール

### ユーザーが「校正して」「校正」「チェック」「lint」と言った場合
以下の手順で自動実行してください：

**重要: 新しいJavaScriptファイルは作成せず、既存のproofreader.jsを使用してください**

1. **事前チェック**
   - `urls.txt`ファイルが存在し、有効なURLが含まれていることを確認
   - `proofreader.js`ファイルが存在することを確認
   - `node_modules`ファイルが存在しなければ `npm install` を実行

2. **テキスト抽出の実行**
   既存のproofreader.jsを実行してWebページからテキストを抽出：
   ```
   node proofreader.js
   ```
   このスクリプトは以下を自動実行します：
   - urls.txtからURLリストを読み込み
   - 各URLに対してPlaywrightでページアクセス
   - mainタグ → bodyタグの順でテキスト抽出
   - エラーハンドリングとレポート生成
   - **6ページ以下**: 単一の `text-extraction-[timestamp].md` ファイルを生成
   - **7ページ以上**: バッチ分割で複数ファイルを生成
     - `text-extraction-batch-[N]-[timestamp].md` (各バッチファイル)
     - `text-extraction-summary-[timestamp].md` (全体サマリー)
     - `text-extraction-errors-[timestamp].md` (エラーがある場合)

3. **抽出結果の確認**
   - **6ページ以下の場合**: 生成された単一の `text-extraction-[timestamp].md` ファイルを確認
   - **7ページ以上の場合**: 
     - まず `text-extraction-summary-[timestamp].md` で全体概要を確認
     - 各 `text-extraction-batch-[N]-[timestamp].md` ファイルを順次確認
   - 抽出されたテキストデータを取得

4. **校正実行**
   **6ページ以下の場合**: 単一ファイルの全テキストに対して校正実行
   **7ページ以上の場合**: 各バッチファイルに対して個別に校正実行
   
   各テキストに対して、以下のプロンプトでLLM校正を実行（応答メッセージには校正対象テキストを含めないこと）：
   ```
   以下のテキストの誤字・誤記をチェックして、問題がある箇所のみを指摘してください。

   【校正対象テキスト】
   [抽出されたテキスト]

   【校正観点】
   1. 基本的な誤字・誤記
      - タイポ、スペルミス
      - 明らかな文法エラー
      - 固有名詞の綴り
      - 変換ミス

   2. 日本語固有の観点
      - 漢字の使い分け
      - 同音異義語の使い分け
      - 送り仮名の正確性
      - 助詞の使い方（「は」vs「わ」等）

   3. 英語固有の観点
      - 英単語の綴り

   【指摘形式】
   - 誤字・誤記がある場合のみ、以下の形式で指摘してください：
     - 位置: [該当箇所の前後の文脈]
     - 誤り: [間違っている部分]
     - 修正案: [正しい表記]
     - 理由: [修正理由]

   - 誤字・誤記がない場合は「校正すべき箇所はありませんでした。」とだけ回答してください。

   【注意事項】
   - 英語・日本語両方対応
   - 明確な誤字・誤記のみを指摘（文体や表現の好みは除く）
   - 応答には校正結果のみを返すこと
   - 応答には校正対象テキストを含めないこと
   ```

5. **最終レポート生成**
   - **6ページ以下の場合**: 単一の校正結果をまとめてレポート生成
   - **7ページ以上の場合**: 全バッチの校正結果を統合してレポート生成
   - 全ての校正結果をMarkdown形式で最終レポート生成
   - ファイル名: `report/proofreading-report-[timestamp].md`
   - **レポート形式**: `report-template.md`のテンプレートを使用
   - プレースホルダーを実際のデータで置換してレポート作成
   - 校正結果のみを返す

6. **結果表示**
   - 処理完了をユーザーに報告
   - 生成されたレポートファイルの場所を案内
   - 主要な統計情報を要約して表示
   - **分割処理の場合**: バッチ数と処理したページ数も報告

## バッチ処理設定

### デフォルト設定
- **分割閾値**: 6ページ（7ページ以上で自動分割）
- **バッチサイズ**: 6ページ/バッチ
- **ファイル命名規則**:
  - バッチファイル: `text-extraction-batch-[N]-[timestamp].md`
  - サマリーファイル: `text-extraction-summary-[timestamp].md`
  - エラーファイル: `text-extraction-errors-[timestamp].md` (エラーがある場合のみ)

### 分割処理のメリット
- **校正精度向上**: 少数ページに集中した詳細な校正
- **メモリ効率**: 大量テキストの一括処理を回避
- **エラー追跡**: 問題ページの特定が容易
- **再処理**: 部分的な再実行が可能

## レポートテンプレート

### テンプレートファイル
- `report-template.md`を使用してレポートを生成
- プレースホルダー形式で統一されたレポート構造を提供
- 分割処理の場合は各バッチの結果を統合して表示

### レポート品質基準
- サマリーテーブルには全ページの状況を一覧表示
- 詳細結果は誤記があるページのみ記載
- 分割処理の場合はバッチ情報も含める

## 重要な制約事項

### ファイル作成ルール
- 既存の`proofreader.js`を使用すること
- レポートファイル（.md）のみ新規作成可能
- `report-template.md`テンプレートの使用必須
- 分割処理時は複数のtext-extractionファイルが生成される


