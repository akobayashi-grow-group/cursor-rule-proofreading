# Text Linter - Cursor Rules

## 概要
このプロジェクトは、URLリストからWebページのテキストを取得し、Playwright MCPとCursorのLLMを使って誤字・誤記の校正を行うツールです。

## 自動実行ルール

### ユーザーが「校正して」「校正」「チェック」「lint」と言った場合
以下の手順で自動実行してください：

1. **事前チェック**
   - `urls.txt`ファイルが存在し、有効なURLが含まれていることを確認
   - 必要に応じて依存関係をインストール: `npm install`

2. **Playwright MCP セットアップ**
   - Playwright MCPサーバーが利用可能であることを確認
   - ブラウザのインストールが必要な場合は`browser_install`を実行

3. **URL処理の実行**
   各URLに対して以下を順次実行：
   ```
   - browser_navigate: 指定URLに移動
   - browser_snapshot: ページ構造を取得
   - browser_get_text (selector: "main"): mainタグ内のテキスト取得を試行
   - mainタグがない場合: browser_get_text (selector: "body"): bodyタグ内のテキスト取得
   - アクセスエラーの場合: スキップして次のURLへ
   ```

4. **テキスト校正の実行**
   取得したテキストに対して以下のプロンプトでLLM校正を実行：
   ```
   以下のテキストの誤字・誤記をチェックして、問題がある箇所のみを指摘してください。

   【校正対象テキスト】
   [取得したテキスト]

   【指摘形式】
   - 誤字・誤記がある場合のみ、以下の形式で指摘してください：
     - 位置: [該当箇所の前後の文脈]
     - 誤り: [間違っている部分]
     - 修正案: [正しい表記]
     - 理由: [修正理由]

   - 誤字・誤記がない場合は「校正すべき箇所はありませんでした。」とだけ回答してください。

   【注意事項】
   - 英語・日本語両方対応
   - 明確な誤字・誤記のみを指摘（文体や表現の好みは除く）
   - タイポ、スペルミス、明らかな文法エラーを対象
   ```

5. **レポート生成**
   - 全ての結果をMarkdown形式でレポート生成
   - ファイル名: `report-[timestamp].md`
   - 成功/エラー/校正結果の詳細を含む

6. **結果表示**
   - 処理完了をユーザーに報告
   - 生成されたレポートファイルの場所を案内
   - 主要な統計情報を要約して表示

## 技術仕様

### 処理制限
- 同時処理: 最大2URL
- エラーハンドリング: アクセスできないURLはスキップ
- フォールバック: mainタグがない場合はbodyタグを使用

### 必要なツール
- Playwright MCP サーバー
- 以下のMCP機能を使用:
  - `browser_navigate`
  - `browser_snapshot`
  - `browser_get_text`
  - `browser_install` (必要に応じて)

### 依存関係
- Node.js 18以上
- @playwright/mcp パッケージ

## 使用方法

1. `urls.txt`にチェックしたいURLを1行ずつ記載
2. 「校正して」とCursorに指示
3. 自動的に校正処理が実行される
4. 生成されたレポートで結果を確認

## 注意事項
- 大量のURLを処理する場合は時間がかかります
- アクセスに制限があるサイトはスキップされます
- LLMによる校正結果は参考として利用してください 